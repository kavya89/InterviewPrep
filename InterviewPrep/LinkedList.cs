using System; namespace InterviewPrep {     public class Node     {         public int data;         public Node next;          public Node(int value)         {             data = value;             next = null;         }     }      //Linked list functions     public class LinkedList     {         public Node head;          public LinkedList()         {             head = null;         }          public void BuildLinkedList(){             for (int i = 0; i <= 5;i++){                 AddNodeAtBeginning(i);             }         }          //Length of linked list         public int GetLength()         {             //calculate length             Node current = head;             int length = 0;             while (current != null)             {                 length++;                 current = current.next;             }             return length;         }          //add node at the beginning of the list         public void AddNodeAtBeginning(int value)         {             //Add node             Node newNode = new Node(value);             newNode.next = head;             head = newNode;         }          //add Node at end of linked list         public void AddNodeAtEnd(int value)         {             //empty list             if (head == null)             {                 head = new Node(value);             }             //Add node             Node current = head;             while (current.next != null)                 current = current.next;              current.next = new Node(value);         }          //add Node at nth index         public void AddNodeAtIndex(int value, int index)         {             if (index == 1) { AddNodeAtBeginning(value); return; }             int pos = 1;             Node current = head;             while (current != null && pos <= index - 1)             {                 pos++;                 current = current.next;             }             if (current == null) throw new Exception("Not sufficient nodes");// when not sufficient nodes             Node newNode = new Node(value);             newNode.next = current.next;             current.next = newNode;         }          //delete Node from beginning of LinkedList         public void DeleteNodeFromBeginning()         {             //empty list             if (head == null)                 throw new Exception("Empty list");             //Delete Node             head = head.next;         }          //delete Node from end of LinkedList         public void DeleteNodeFromEnd()         {             //empty list             if (head == null)                 throw new Exception("Empty list");             // one node list             if (head.next == null)             {                 head = null;                 return;             }             // Delete node from multi node list             Node current = head;             Node previousNode = current;             while (current.next != null)             {                 previousNode = current;                 current = current.next;             }             previousNode.next = null;         }          //Delete Node at nth Index         public void DeleteNodeAtIndex(int index)         {             //empty list             if (head == null)                 throw new IndexOutOfRangeException();             if (index == 1)             {                 DeleteNodeFromBeginning();                 return;             }             Node current = head;             Node Previous = current;             int position = 1;             while (current != null && position <= index - 1)             {                 Previous = current;                 current = current.next;                 position++;             }              if (current != null) { Previous.next = current.next; return; }             throw new IndexOutOfRangeException();          }          //Reverse List         public Node ReverseList()         {             Node current = head;             Node previous = null;             Node next = null;              while (current != null)             {                 next = current.next;                 current.next = previous;                 previous = current;                 current = next;             }             return previous;         }          //Print list         public void PrintList(){             Node current = head;             while(current != null){                 Console.Write(current.data + "-> ");                 current = current.next;             }         }     } }  
